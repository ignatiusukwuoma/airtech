from datetime import timedelta, datetime

from django.urls import reverse
from django.test import TestCase, Client
from django.utils import timezone

from .models import Flight, Location, FlightStatus, Aircraft
from .utils import get_flight_duration, add_time, tomorrow
from .views import flights, flight_status

NOW = timezone.now()


class ModelTests(TestCase):
    def setUp(self):
        Location.objects.create(
            iata='LOS',
            airport='Murtala Muhammed International',
            city='Lagos',
            country='Nigeria',
            latitude=3.321111,
            longitude=6.577369
        )

        Location.objects.create(
            iata='ABV',
            airport='Nnamdi Azikiwe International',
            city='Abuja',
            country='Nigeria',
            latitude=9.006667,
            longitude=7.263056
        )

        Aircraft.objects.create(
            manufacturer='Airbus',
            model='A380-800',
            capacity=8
        )

        FlightStatus.objects.create(
            name='Scheduled'
        )
        lagos = Location.objects.get(iata='LOS')
        abuja = Location.objects.get(iata='ABV')
        plane = Aircraft.objects.get(model='A380-800')
        scheduled_status = FlightStatus.objects.get(name='Scheduled')

        Flight.objects.create(
            flight_number='FA110',
            departure=lagos,
            destination=abuja,
            scheduled=NOW,
            flight_status=scheduled_status,
            aircraft=plane,
            price_economy=16000,
            price_business=2000
        )

    def test_saves_unentered_flight_fields_correctly(self):
        """
        Checks if the fields for Flight model that were not explicitly entered
        when creating an instance were correctly generated by our model logic
        """
        flight = Flight.objects.get(flight_number='FA110')
        duration = get_flight_duration(flight.departure, flight.destination)
        arrival = add_time(flight.last_update, flight.flight_duration)
        self.assertEqual(flight.last_update, flight.scheduled)
        self.assertEqual(flight.flight_duration, duration)
        self.assertEqual(flight.arrival, arrival)

    def test_modifies_last_update_when_scheduled_changes(self):
        """
        Checks is the last_update field is modified accordingly
        when the flight scheduled field is changed
        """
        flight = Flight.objects.get(flight_number='FA110')
        self.assertEqual(flight.last_update, flight.scheduled)
        tomorrow = NOW + timedelta(days=1)
        flight.scheduled = tomorrow
        flight.save()
        self.assertEqual(flight.last_update, flight.scheduled)

    def test_modifies_arrival_when_last_update_changes(self):
        """
        Checks if the arrival field is modified accordingly
        when the flight last update field is changed
        """
        flight = Flight.objects.get(flight_number='FA110')
        tomorrow = NOW + timedelta(days=1)
        flight.last_update = tomorrow
        flight.save()
        arrival = add_time(flight.last_update, flight.flight_duration)
        self.assertEqual(flight.arrival, arrival)


class ViewTests(TestCase):
    def setUp(self):
        self.client = Client()

        Location.objects.create(
            iata='LOS',
            airport='Murtala Muhammed International',
            city='Lagos',
            country='Nigeria',
            latitude=3.321111,
            longitude=6.577369
        )

        Location.objects.create(
            iata='ABV',
            airport='Nnamdi Azikiwe International',
            city='Abuja',
            country='Nigeria',
            latitude=9.006667,
            longitude=7.263056
        )

        Aircraft.objects.create(
            manufacturer='Airbus',
            model='A380-800',
            capacity=8
        )

        FlightStatus.objects.create(
            name='Scheduled'
        )
        lagos = Location.objects.get(iata='LOS')
        abuja = Location.objects.get(iata='ABV')
        plane = Aircraft.objects.get(model='A380-800')
        scheduled_status = FlightStatus.objects.get(name='Scheduled')

        Flight.objects.create(
            flight_number='FA110',
            departure=lagos,
            destination=abuja,
            scheduled=NOW,
            flight_status=scheduled_status,
            aircraft=plane,
            price_economy=16000,
            price_business=2000
        )

    def test_home_page_opens(self):
        response = self.client.get(reverse('index'))

        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.charset, 'utf-8')
        self.assertEqual(response.context['title'], 'Home')
        self.assertContains(response, 'Book Flight')

    def test_flight_status_returns_flights(self):
        flight = {"flight_number": "FA110"}
        response = self.client.post(reverse('flights:flight_status'), data=flight)

        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.resolver_match.func, flight_status)
        self.assertQuerysetEqual(response.context['flights'], ['<Flight: FA110, Lagos - Abuja>'])
        self.assertTemplateUsed(response, 'flight_status.html')

    def test_flights_view_handles_flight_search(self):
        booking = {"from_location": 1, "to_location": 2, "departure_date": tomorrow(), "adults": 1}
        
        response = self.client.post(reverse('flights:search_flights'), data=booking)

        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Select Flight')
        self.assertEqual(response.resolver_match.func, flights)


